/***********************************************************************************************************************
* DISCLAIMER
* This software is supplied by Renesas Electronics Corporation and is only 
* intended for use with Renesas products. No other uses are authorized. This 
* software is owned by Renesas Electronics Corporation and is protected under 
* all applicable laws, including copyright laws.
* THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING 
* THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT 
* LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE 
* AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.
* TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS 
* ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
* FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR 
* ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE 
* BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
* Renesas reserves the right, without notice, to make changes to this software 
* and to discontinue the availability of this software.  By using this software, 
* you agree to the additional terms and conditions found by accessing the 
* following link:
* http://www.renesas.com/disclaimer
*
* Copyright (C) 2011, 2013 Renesas Electronics Corporation. All rights reserved.
***********************************************************************************************************************/

/***********************************************************************************************************************
* File Name    : r_main.c
* Version      : CodeGenerator for RL78/G13 V2.00.00.07 [22 Feb 2013]
* Device(s)    : R5F100LE
* Tool-Chain   : CA78K0R
* Description  : This file implements main function.
* Creation Date: 2014/12/3
***********************************************************************************************************************/

/***********************************************************************************************************************
Pragma directive
***********************************************************************************************************************/
/* Start user code for pragma. Do not edit comment generated here */
/* End user code. Do not edit comment generated here */

/***********************************************************************************************************************
Includes
***********************************************************************************************************************/
#include "r_cg_macrodriver.h"
#include "r_cg_cgc.h"
#include "r_cg_serial.h"
#include "r_cg_timer.h"
#include "r_cg_it.h"
/* Start user code for include. Do not edit comment generated here */
#include "mpu6050.h"
#include "filter.h"
#include "pid.h"
/* End user code. Do not edit comment generated here */
#include "r_cg_userdefine.h"

/***********************************************************************************************************************
Global variables and functions
***********************************************************************************************************************/
/* Start user code for global. Do not edit comment generated here */
extern u8 UART0_Recieve_Buf[64];
extern u8 UART0_Recieve_Byte;
extern u8 UART0_Receiveend;
extern u8 Time_500HZ;
extern u8 Time_250HZ;
extern float M_Thr;

u8 tx_buf[10] = "dzb";
/* End user code. Do not edit comment generated here */
void R_MAIN_UserInit(void);
u16 MOTOR_Update(u16 Motor);

/***********************************************************************************************************************
* Function Name: main
* Description  : This function implements main function.
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
void main(void)
{
    R_MAIN_UserInit();
    /* Start user code. Do not edit comment generated here */
	
    while (1U)
    {
        if(UART0_Receiveend & 0x80)
		{
			UART0_Receiveend = 0;
			
			if( UART0_Recieve_Buf[0] == 'G' && UART0_Recieve_Buf[1] == 'O' )
			{
				R_IT_Start();
				
				break;
			}
		}
    }

	while (1U)
	{
		if(Time_250HZ)
		{
			Time_250HZ = 0;
			
			MPU6050_Data_Update();
			
			Filter();
			
			PID_Cal();
		}
		
		if(UART0_Receiveend & 0x80)
		{
			UART0_Receiveend = 0;
			
			if( UART0_Recieve_Buf[0] == 'S' && UART0_Recieve_Buf[1] == 'T' )
			{
				MOTOR1 = 1000;
				MOTOR2 = 1000;
				MOTOR3 = 1000;
				MOTOR4 = 1000;
					
				M_Thr = 1000;
					
				UART0_Receiveend = 0;
					
				while (1U)
				{
					if(UART0_Receiveend & 0x80)
					{
						UART0_Receiveend = 0;
							
						if( UART0_Recieve_Buf[0] == 'G' && UART0_Recieve_Buf[1] == 'O' )
						{
							break;
						}
							
						if(UART0_Recieve_Buf[0] == 'S' && UART0_Recieve_Buf[1] == 'P')
						{
							PID_Pitch.Kp = (UART0_Recieve_Buf[2]<<8)|(UART0_Recieve_Buf[3]);
							PID_Roll.Kp = (UART0_Recieve_Buf[2]<<8)|(UART0_Recieve_Buf[3]);

							PID_Pitch.Kp /= 1000;
							PID_Roll.Kp /= 1000;
						}
							
						if(UART0_Recieve_Buf[0] == 'S' && UART0_Recieve_Buf[1] == 'I')
						{
							PID_Pitch.Ki = (UART0_Recieve_Buf[2]<<8)|(UART0_Recieve_Buf[3]);
							PID_Roll.Ki = (UART0_Recieve_Buf[2]<<8)|(UART0_Recieve_Buf[3]);
								
							PID_Pitch.Ki /= 1000;
							PID_Roll.Ki /= 1000;
						}
														
						if(UART0_Recieve_Buf[0] == 'S' && UART0_Recieve_Buf[1] == 'D')
						{
							PID_Pitch.Kd = ( UART0_Recieve_Buf[2]<<8)|(UART0_Recieve_Buf[3]);
							PID_Roll.Kd = ( UART0_Recieve_Buf[2]<<8)|(UART0_Recieve_Buf[3]);
											
							PID_Pitch.Kd /= 1000;
							PID_Roll.Kd /= 1000;
						}
							
						if(UART0_Recieve_Buf[0] == 'E' && UART0_Recieve_Buf[1] == 'P')
						{
							PID_Pitch.Expect = ( UART0_Recieve_Buf[2]<<8)|(UART0_Recieve_Buf[3]);
										
							PID_Pitch.Expect /= 1000;
						}
						
						if(UART0_Recieve_Buf[0] == 'E' && UART0_Recieve_Buf[1] == 'R')
						{
							PID_Roll.Expect = ( UART0_Recieve_Buf[2]<<8)|(UART0_Recieve_Buf[3]);
										
							PID_Roll.Expect /= 1000;
						}
					}
				}
			}
			if( UART0_Recieve_Buf[0] == 'P' && UART0_Recieve_Buf[1] == 'W' )
			{
				M_Thr = (float)( UART0_Recieve_Buf[2]<<8 | UART0_Recieve_Buf[3] );
				M_Thr = (float)(MOTOR_Update( (u16)M_Thr) );
			}
			
			if(UART0_Recieve_Buf[0] == 'S' && UART0_Recieve_Buf[1] == 'P')
			{
				PID_Pitch.Kp = (UART0_Recieve_Buf[2]<<8)|(UART0_Recieve_Buf[3]);
				PID_Roll.Kp = (UART0_Recieve_Buf[2]<<8)|(UART0_Recieve_Buf[3]);

				PID_Pitch.Kp /= 1000;
				PID_Roll.Kp /= 1000;
			}
			
			if(UART0_Recieve_Buf[0] == 'S' && UART0_Recieve_Buf[1] == 'I')
			{
				PID_Pitch.Ki = (UART0_Recieve_Buf[2]<<8)|(UART0_Recieve_Buf[3]);
				PID_Roll.Ki = (UART0_Recieve_Buf[2]<<8)|(UART0_Recieve_Buf[3]);
				
				PID_Pitch.Ki /= 1000;
				PID_Roll.Ki /= 1000;
			}
										
			if(UART0_Recieve_Buf[0] == 'S' && UART0_Recieve_Buf[1] == 'D')
			{
				PID_Pitch.Kd = ( UART0_Recieve_Buf[2]<<8)|(UART0_Recieve_Buf[3]);
				PID_Roll.Kd = ( UART0_Recieve_Buf[2]<<8)|(UART0_Recieve_Buf[3]);
							
				PID_Pitch.Kd /= 1000;
				PID_Roll.Kd /= 1000;
			}
			
			if(UART0_Recieve_Buf[0] == 'E' && UART0_Recieve_Buf[1] == 'P')
			{
				PID_Pitch.Expect = ( UART0_Recieve_Buf[2]<<8)|(UART0_Recieve_Buf[3]);
							
				PID_Pitch.Expect /= 1000;
			}
			
			if(UART0_Recieve_Buf[0] == 'E' && UART0_Recieve_Buf[1] == 'R')
			{
				PID_Roll.Expect = ( UART0_Recieve_Buf[2]<<8)|(UART0_Recieve_Buf[3]);
							
				PID_Roll.Expect /= 1000;
			}
		}
	}
    /* End user code. Do not edit comment generated here */
}

/***********************************************************************************************************************
* Function Name: R_MAIN_UserInit
* Description  : This function adds user code before implementing main function.
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
void R_MAIN_UserInit(void)
{
	u16 i = 10000;
    /* Start user code. Do not edit comment generated here */
    EI();
	
	while(i--);
	
	R_TAU0_Channel0_Start();
	
	R_UART0_Start();
	R_UART0_Send(tx_buf, 4);
	R_UART0_Receive( &UART0_Recieve_Byte, 1);
	
	PID_Init();
	
	Filter_Init();
	
	MPU6050_Init();
    /* End user code. Do not edit comment generated here */
}

/* Start user code for adding. Do not edit comment generated here */
/* End user code. Do not edit comment generated here */
